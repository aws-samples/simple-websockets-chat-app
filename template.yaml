AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  simple-websockets-chat-app

  SAM Template for simple-websockets-chat-app that has the DynamoDB table and Lambda
  functions needed to demonstrate the Websocket protocol on API Gateway.

Parameters:
  AppPrefix:
    Type: String
    Default: "simplechat-connections"
    Description: Prefix to name the resources in the system
  TableName:
    Type: String
    Default: "simplechat-connections-table"
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_-]+$
    ConstraintDescription: "Required. Can be characters, dash, and underscore only. No numbers or special characters allowed."
  WebsiteBucketName:
    Type: String
    Default: "simplechat-connections-bucket"
    Description: (Required) The name of the new Bucket where the static webclient will be hosted. Minimum 3 characters
    MinLength: 3
    MaxLength: 60
    AllowedPattern: ^[A-Za-z-]+$
    ConstraintDescription: "Required. Can be characters and dash only. No numbers or special characters allowed."
  CertificateArn:
    Type: String
    Description: The ARN from the Certificate Manager Certificate
  DomainName:
    Type: String
    Description: (Required) The domain for your chat app
  LocalDynamodbEndpoint:
    Type: String
    Default: ""
    Description: Used for local testing

Resources:
  SimpleChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SimpleChatWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - SendRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref SimpleChatWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleChatWebSocket
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: roomId
          AttributeType: S
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: roomId
          KeyType: HASH
        - AttributeName: connectionId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: ConnectionIdIndex
          KeySchema:
            - AttributeName: connectionId
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TableName
  OnConnectFunction:
    DependsOn:
      - EventsStream
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          EVENTS_STREAM: !Join ["-", [!Ref AppPrefix, "events-stream"]]
          TABLE_NAME: !Ref TableName
          CONNECTION_ID_INDEX: ConnectionIdIndex
          LOCAL_DYNAMODB_ENDPOINT: !Ref LocalDynamodbEndpoint
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - Statement:
          - Effect: Allow
            Action:
              - "firehose:PutRecord"
              - "firehose:PutRecordBatch"
            Resource:
              - !GetAtt EventsStream.Arn
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    DependsOn:
      - EventsStream
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          EVENTS_STREAM: !Join ["-", [!Ref AppPrefix, "events-stream"]]
          TABLE_NAME: !Ref TableName
          CONNECTION_ID_INDEX: ConnectionIdIndex
          LOCAL_DYNAMODB_ENDPOINT: !Ref LocalDynamodbEndpoint
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - Statement:
          - Effect: Allow
            Action:
              - "firehose:PutRecord"
              - "firehose:PutRecordBatch"
            Resource:
              - !GetAtt EventsStream.Arn
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    DependsOn:
      - EventsStream
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          EVENTS_STREAM: !Join ["-", [!Ref AppPrefix, "events-stream"]]
          TABLE_NAME: !Ref TableName
          CONNECTION_ID_INDEX: ConnectionIdIndex
          LOCAL_DYNAMODB_ENDPOINT: !Ref LocalDynamodbEndpoint
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*"
            - Effect: Allow
              Action:
                - "firehose:PutRecord"
                - "firehose:PutRecordBatch"
              Resource:
                - !GetAtt EventsStream.Arn
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com

  # Based on https://izifortune.com/serverless-website-sam-aws/
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Description: Let the bucket be accessed only by CloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Serverless website OA

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Cloudfront distribution for serverless website
        Aliases:
          - !Ref DomainName
          - !Sub '*.${DomainName}'
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebsiteBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        # Restricting access to cloudfront only.
        Statement:
          - Effect: Allow
            Action: "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  EventsStream:
    DependsOn:
      - EventsStreamPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Join ["-", [!Ref AppPrefix, "events-stream"]]
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ["", ['arn:aws:s3:::', !Ref EventsS3Bucket]]
        BufferingHints:
          IntervalInSeconds: 900
          SizeInMBs: 128
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/
        ErrorOutputPrefix: firehoseError/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/!{firehose:error-output-type}
        RoleARN: !GetAtt EventsStreamRole.Arn

  EventsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["-", [!Ref AppPrefix, "events-bucket"]]

  EventsStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  EventsStreamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ["-", [!Ref AppPrefix, "events-policy"]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join ["", ['arn:aws:s3:::', !Ref EventsS3Bucket]]
              - !Join ["", ['arn:aws:s3:::', !Ref EventsS3Bucket, '*']]
      Roles:
        - !Ref EventsStreamRole

Outputs:
  FunctionName:
    Description: "Function name"
    Value: !Ref LambdaFunction
  StreamARN:
    Description: "Stream ARN"
    Value: !GetAtt stream.Arn

Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  SendMessageFunctionArn:
    Description: "SendMessage function ARN"
    Value: !GetAtt SendMessageFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value:
      !Join [
        "",
        [
          "wss://",
          !Ref SimpleChatWebSocket,
          ".execute-api.",
          !Ref "AWS::Region",
          ".amazonaws.com/",
          !Ref "Stage",
        ],
      ]

  WebsitePublicUrl:
    Description: "Public endpoint to access the chat"
    Value: !Join ["", ["https://", !GetAtt CloudfrontDistribution.DomainName]]
